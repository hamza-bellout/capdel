<?php

use Drupal\capdel_helper\Form\UserEditForm;
use Drupal\capdel_helper\Form\UserLoginForm;
use Drupal\capdel_helper\Form\UserPasswordForm;
use Drupal\capdel_helper\Helpers\EventHelper;
use Drupal\capdel_helper\Helpers\TaxonomieHelper;
use \Drupal\capdel_helper\Helpers\PagerHelper;
use Drupal\Core\Form\FormState;
use Drupal\Core\Render\Element;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Site\Settings;

/**
 * @file
 * Functions to support theming in the Capdel theme.
 */

function capdel_preprocess_page(&$variables) {
  $logo = theme_get_setting('logo.url');

  $variables['logo'] = $logo;

  if(array_key_exists('node', $variables)) {
    $node = $variables['node'];
    if ($node != null && $node instanceof \Drupal\node\Entity\Node && $node->bundle() == 'event') {
      $similarEvents = EventHelper::getSimilarEvents($node);
      $variables['similarEvents'] = $similarEvents;
    }
  }

  $mapsConfig = \Drupal::config('maps.settings');
  $variables['config']['maps.settings'] = $mapsConfig->get();

  $mapsConfig = \Drupal::config('chat.settings');
  $variables['config']['chat.settings'] = $mapsConfig->get();

  if(capdel_theme_is_nocache_page($variables)) {
    $variables['#cache']['max-age'] = 0;
  }
}

function capdel_theme_is_nocache_page($variables){
  //reservation section was not updated upon reload after changing 'Nombre de participants' value
  if(array_key_exists('node', $variables) && $variables['node'] instanceof \Drupal\node\Entity\Node &&
    $variables['node']->bundle() == 'event') {
    return true;
  }
  //issue with user name at top of the page
  if(array_key_exists('node', $variables) && $variables['node'] instanceof \Drupal\node\Entity\Node &&
    in_array($variables['node']->url(), ['/profileinfo', '/profileedit', '/reservations'])) {
    return true;
  }

  return false;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function capdel_theme_suggestions_page_alter(array &$suggestions, array $variables) {
   capdel_theme_suggestion_by_node_content_type($suggestions);
   capdel_theme_suggestion_by_url($suggestions);

  $route_name = \Drupal::routeMatch()->getRouteName();
  switch ($route_name) {
    case 'system.403':
      // Access Denied.
      $error = 403;
      break;

    case 'system.404':
      // Page Not Found.
      $error = 404;
      break;
  }
  if (isset($error)) {
    $suggestions[] = 'page__' . $error;
  }
}

function capdel_theme_suggestion_by_node_content_type(array &$suggestions) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if(!$node instanceof \Drupal\node\Entity\Node){
      return;
    }

    $content_type = $node->bundle();
    $suggestions[] = 'page__'.$content_type;
  }
}

function capdel_theme_suggestion_by_url(array &$suggestions) {
  $current_path = \Drupal::service('path.current')->getPath();
  $result = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  $path_alias = trim($result, '/');
  $path_alias = str_replace('-', '_', $path_alias);
  $path_alias = str_replace('/', '-', $path_alias);

  $suggestions[] = 'page__url__'.$path_alias;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function capdel_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Prepares variables for user templates.
 *
 * Default template: user.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *     fields attached to the user. Properties used:
 *     - #user: A \Drupal\user\Entity\User object. The user account of the
 *       profile being viewed.
 *   - attributes: HTML attributes for the containing element.
 */
function capdel_preprocess_user(&$variables) {
  $variables['user'] = $variables['elements']['#user'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['content']['field_email'] = $variables['user']->getEmail();
}

function capdel_form_user_form_alter(&$form, FormState $form_state, $form_id) {
  $form['#submit'][] = 'capdel_user_edit_redirect';
  $form['#pre_render'][] = 'capdel_user_edit_prerender';
  $form['actions']['submit']['#submit'][] = 'capdel_user_edit_redirect';
  $form['account']['pass']['#title'] = t('Nouveau mot de passe');
}

function capdel_user_edit_prerender($form){
  $form['actions']['#attributes']['class'][] = 'text-center mt-5';
  $form['actions']['cancel'] = array(
    '#type' => 'button',
    '#value' => t('Cancel'),
    '#weight' => -1,
    '#attributes' => array(
      'onclick' => 'window.location = "/profileinfo"; return false;',
      'class' => ['btn', 'btn-outline-primary', 'mr-2']
    ),
  );
  return $form;
}

function capdel_form_user_pass_alter(&$form, FormState $form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = '::submitForm';
  $form['actions']['submit']['#submit'][] = 'user_pass_redirect';
  $form['#validate'][] = 'user_pass_validate';
}

function capdel_form_user_login_form_alter(&$form, FormState $form_state, $form_id) {
  $form['#pre_render'][] = 'capdel_user_login_prerender';
  $form['actions']['submit']['#submit'][] = '::submitForm';
  $form['actions']['submit']['#submit'][] = 'capdel_user_login_redirect';
}

function capdel_form_views_exposed_form_alter(&$form, FormState $form_state, $form_id) {
  // If not the view we are looking, move on
  if ($form['#id'] == 'views-exposed-form-configurateur-view-conf-lieu' ||
    $form['#id'] == 'views-exposed-form-configurateur-view-conf-menu' ||
    $form['#id'] == 'views-exposed-form-configurateur-view-conf-activities' ||
    $form['#id'] == 'views-exposed-form-configurateur-view-conf-animations' ||
    $form['#id'] == 'views-exposed-form-configurateur-view-conf-options'
  ) {
      capdel_configurateur_form_alter($form, $form_state, $form_id);
      return;
  }
  if ($form['#id'] == 'views-exposed-form-search-results-page-search-page') {
      capdel_search_form_alter($form, $form_state, $form_id);
      return;
  }
}

function capdel_configurateur_form_alter(&$form, $form_state, $form_id) {
  $form['type']['#options']['All'] = t('&nbsp;');
  $form['date']['#options']['All'] = t('&nbsp;');
  $form['destination']['#options']['All'] = t('&nbsp;');

  //setup 'Date' calendar field
  $form['format_date'] = [
    '#type' => 'textfield',
    '#size' => 30,
    '#attributes' => [
      'class' => ['datepicker'],
      'autocomplete' => ['off'],
      'pattern' => ['^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$'],
      'oninvalid' => ["setCustomValidity('Merci de renseigner une date au format JJ/MM/AAAA')"],
      'oninput' => ["setCustomValidity('')"],
    ],
    '#field_prefix' => '<div class="datepicker-holder">',
    '#field_suffix' => '</div>'
  ];

  //add new field after 'field_event_sub_tax_availability'
  $new_info = [];
  foreach($form['#info'] as $info) {
    $new_info[] = $info;
    if($info['value'] == 'date') {
      $new_info[] = [
        'value' => 'format_date',
        'label' => $info['label']
      ];
    }
  }
  $form['#info'] = $new_info;
}

function capdel_search_form_alter(&$form, FormState $form_state, $form_id) {
  $topTerms = TaxonomieHelper::getTopTerms('tax_menu_types');

  usort($topTerms, function (Term $t1, Term $t2){
    return $t1->getName() < $t2->getName() ? -1 : 1;
  });

  // Start building out the options for our select list
  $options = [
    'All' => t('&nbsp;')
  ];

  // Push titles into select list
  foreach ($topTerms as $term) {
    $options[$term->id()] = $term->getName();
  }
  $form['type_evenement']['#options'] = $options;

  // set default values to empty fields, use t function to preserves formatting
  $form['date']['#options']['All'] = t('&nbsp;');
  $form['participant']['#options']['All'] = t('&nbsp;');
  $form['destination']['#options']['All'] = t('&nbsp;');

  //setup 'Date' calendar field
  $form['format_date'] = [
    '#type' => 'textfield',
    '#size' => 30,
    '#attributes' => [
      'class' => ['datepicker'],
      'autocomplete' => ['off'],
      'pattern' => ['^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$'],
      'oninvalid' => ["setCustomValidity('Merci de renseigner une date au format JJ/MM/AAAA')"],
      'oninput' => ["setCustomValidity('')"],
    ],
    '#field_prefix' => '<div class="datepicker-holder">',
    '#field_suffix' => '</div>'
  ];

  //add new field after 'field_event_sub_tax_availability / date'
  $new_info = [];
  foreach($form['#info'] as $info) {
    $new_info[] = $info;
    if($info['value'] == 'date') {
      $new_info[] = [
        'value' => 'format_date',
        'label' => $info['label']
      ];
    }
  }
  $form['#info'] = $new_info;
}

function capdel_user_edit_redirect(&$form, &$form_state) {
  UserEditForm::redirect($form, $form_state);
}

function user_pass_redirect(&$form, &$form_state) {
  UserPasswordForm::redirect($form, $form_state);
}

function user_pass_validate(&$form, &$form_state) {
  UserPasswordForm::validate($form, $form_state);
}

function capdel_user_login_prerender($form) {
  return UserLoginForm::prerender($form);
}

function capdel_user_login_redirect(&$form, &$form_state) {
  return UserLoginForm::redirect($form, $form_state);
}


/**
 * @param $variables
 * @param $hook
 */
function capdel_preprocess(&$variables, $hook) {
    $uid = \Drupal::currentUser()->id();
    $variables['favCount'] = false;
    if($uid > 0) {
        $connection = \Drupal::database();
        $query = $connection->query("SELECT count(*) FROM {flagging} WHERE flag_id = 'bookmark' && uid = :uid;", [
          ':uid' => $uid,
        ]);

        $result = $query->fetchAssoc();
        $variables['favCount'] = reset($result);
    }

    $variables['GTM'] = settings::get('google_tag_manager_id');
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function capdel_preprocess_block(&$variables) {
  if(
    $variables['derivative_plugin_id'] == 'account' || $variables['derivative_plugin_id'] == 'search_filters' ||
    $variables['derivative_plugin_id'] == '6c6c9179-ba6b-4206-aa2b-d97ba0af6136' // hometopslider
  ) {
      $variables['#cache']['max-age'] = 0;
  }
}

function capdel_preprocess_pager(&$variables) {
    if(isset($variables['pager'])) {
        $query = \Drupal\capdel_helper\Helpers\RequestHelper::getQueryParams();

        //Add the landing pages only if we do not have the filters selected
        //affects search pager
        if(isset($query['raw']) &&
            ! isset($query['raw']['f'])
        ) {
            $categoryTid = $variables['pager']['#parameters']['evenement_tous'];
            $destinationTid = $variables['pager']['#parameters']['destination'];

            if($categoryTid === 'All' && $destinationTid !== 'All') {
                $categoryTid = $destinationTid;
            }
            else if($categoryTid === 'All' && $destinationTid === 'All') {
                return;
            }

            $currentPageNumber = $variables['current'] ?? 1;
            //get the items attached to the pager
            $pagerHelper = new PagerHelper($variables['items']);
            //get the landing pages for the given TID
            $landingPagePagesData = $pagerHelper->getLandingPageDataForTid($categoryTid);
            //process landing pages for current pager
            $landingPagesProcessedData = $pagerHelper->addLandingPageArrayToItems($landingPagePagesData['data'],$currentPageNumber);
            //and add them to the vars
            if(isset($landingPagesProcessedData['data']) && \count($landingPagesProcessedData['data']) > 0) {
                if($landingPagesProcessedData['data']['pages'] !== false) {
                    $variables['items']['pages'] = $landingPagesProcessedData['data']['pages'];
                }
                if($landingPagesProcessedData['data']['first']) {
                    $variables['items']['first'] = $landingPagesProcessedData['data']['first'];
                }
                if($landingPagesProcessedData['data']['prev']) {
                    $variables['items']['previous'] = $landingPagesProcessedData['data']['prev'];
                }
                $variables['current'] += $landingPagesProcessedData['currentIncrement'];
            }
        }
    }
}


